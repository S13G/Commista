# Generated by Django 4.1.7 on 2023-05-19 11:47

import autoslug.fields
import core.validators
from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django_countries.fields
import store.validators
import uuid


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="Address",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        unique=True,
                    ),
                ),
                ("created", models.DateTimeField(auto_now_add=True)),
                ("updated", models.DateTimeField(auto_now=True, null=True)),
                (
                    "country",
                    django_countries.fields.CountryField(
                        help_text="The country of the address.", max_length=2
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        help_text="The first name associated with the address.",
                        max_length=255,
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        help_text="The last name associated with the address.",
                        max_length=255,
                    ),
                ),
                (
                    "street_address",
                    models.CharField(
                        help_text="The street address of the address.", max_length=255
                    ),
                ),
                (
                    "second_street_address",
                    models.CharField(
                        blank=True,
                        help_text="The second street address of the address.",
                        max_length=255,
                        null=True,
                    ),
                ),
                (
                    "city",
                    models.CharField(
                        help_text="The city of the address.", max_length=255
                    ),
                ),
                (
                    "state",
                    models.CharField(
                        help_text="The state of the address.", max_length=255
                    ),
                ),
                (
                    "zip_code",
                    models.CharField(
                        help_text="The ZIP code of the address.", max_length=10
                    ),
                ),
                (
                    "phone_number",
                    models.CharField(
                        help_text="The phone number associated with the address.",
                        max_length=20,
                        validators=[core.validators.validate_phone_number],
                    ),
                ),
                (
                    "customer",
                    models.ForeignKey(
                        help_text="The customer associated with the address.",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="addresses",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name_plural": "Addresses",
            },
        ),
        migrations.CreateModel(
            name="Cart",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        unique=True,
                    ),
                ),
                ("created", models.DateTimeField(auto_now_add=True)),
                ("updated", models.DateTimeField(auto_now=True, null=True)),
                (
                    "customer",
                    models.ForeignKey(
                        help_text="The customer associated with the cart.",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="carts",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ("-created",),
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Category",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        unique=True,
                    ),
                ),
                ("created", models.DateTimeField(auto_now_add=True)),
                ("updated", models.DateTimeField(auto_now=True, null=True)),
                (
                    "title",
                    models.CharField(
                        help_text="Enter the category title.",
                        max_length=255,
                        unique=True,
                    ),
                ),
                (
                    "gender",
                    models.CharField(
                        choices=[
                            ("A", "All"),
                            ("K", "Kids"),
                            ("M", "Male"),
                            ("F", "Female"),
                        ],
                        help_text="Select the gender for this category.",
                        max_length=1,
                        null=True,
                    ),
                ),
            ],
            options={
                "verbose_name_plural": "Categories",
            },
        ),
        migrations.CreateModel(
            name="Colour",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        unique=True,
                    ),
                ),
                ("created", models.DateTimeField(auto_now_add=True)),
                ("updated", models.DateTimeField(auto_now=True, null=True)),
                (
                    "name",
                    models.CharField(
                        help_text="Enter the colour name.", max_length=20, unique=True
                    ),
                ),
                (
                    "hex_code",
                    models.CharField(
                        help_text="Enter the hexadecimal code for the colour.",
                        max_length=20,
                        unique=True,
                    ),
                ),
            ],
            options={
                "ordering": ("-created",),
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="CouponCode",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        unique=True,
                    ),
                ),
                ("created", models.DateTimeField(auto_now_add=True)),
                ("updated", models.DateTimeField(auto_now=True, null=True)),
                (
                    "code",
                    models.CharField(
                        editable=False,
                        help_text="The code for the coupon.",
                        max_length=8,
                        unique=True,
                    ),
                ),
                (
                    "price",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="The price of the coupon.",
                        max_digits=6,
                    ),
                ),
                (
                    "expired",
                    models.BooleanField(
                        default=False,
                        help_text="Indicates whether the coupon is expired or not.",
                    ),
                ),
                (
                    "expiry_date",
                    models.DateTimeField(
                        help_text="The date and time when the coupon expires."
                    ),
                ),
            ],
            options={
                "ordering": ("-created",),
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Order",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        unique=True,
                    ),
                ),
                ("created", models.DateTimeField(auto_now_add=True)),
                ("updated", models.DateTimeField(auto_now=True, null=True)),
                (
                    "transaction_ref",
                    models.CharField(
                        help_text="The reference number for the transaction.",
                        max_length=32,
                        unique=True,
                    ),
                ),
                (
                    "placed_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="The date and time when the order was placed.",
                    ),
                ),
                (
                    "total_price",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="The total price of the order.",
                        max_digits=6,
                        null=True,
                    ),
                ),
                (
                    "payment_status",
                    models.CharField(
                        choices=[("P", "Pending"), ("C", "Complete"), ("F", "Failed")],
                        default="P",
                        help_text="The payment status of the order.",
                        max_length=2,
                    ),
                ),
                (
                    "shipping_status",
                    models.CharField(
                        choices=[("P", "Pending"), ("PS", "Processing")],
                        default="P",
                        help_text="The shipping status of the order.",
                        max_length=2,
                    ),
                ),
                (
                    "address",
                    models.ForeignKey(
                        blank=True,
                        help_text="The address associated with the order.",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="orders_address",
                        to="store.address",
                    ),
                ),
                (
                    "customer",
                    models.ForeignKey(
                        help_text="The customer who placed the order.",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="orders",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ("-created",),
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Product",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        unique=True,
                    ),
                ),
                ("created", models.DateTimeField(auto_now_add=True)),
                ("updated", models.DateTimeField(auto_now=True, null=True)),
                (
                    "title",
                    models.CharField(
                        help_text="Enter the product title.",
                        max_length=255,
                        unique=True,
                    ),
                ),
                (
                    "slug",
                    autoslug.fields.AutoSlugField(
                        always_update=True,
                        editable=False,
                        help_text="Auto-generated slug based on the product title.",
                        populate_from="title",
                        unique=True,
                    ),
                ),
                (
                    "description",
                    models.TextField(help_text="Enter the product description."),
                ),
                (
                    "style",
                    models.CharField(
                        help_text="Enter the product style.", max_length=255
                    ),
                ),
                (
                    "price",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="Enter the product price.",
                        max_digits=6,
                    ),
                ),
                (
                    "shipped_out_days",
                    models.IntegerField(
                        help_text="Enter the number of days it takes to ship the product."
                    ),
                ),
                (
                    "shipping_fee",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="Enter the shipping fee for the product.",
                        max_digits=6,
                        validators=[django.core.validators.MinValueValidator(0)],
                    ),
                ),
                (
                    "inventory",
                    models.IntegerField(
                        help_text="Enter the product inventory.",
                        validators=[django.core.validators.MinValueValidator(0)],
                    ),
                ),
                (
                    "percentage_off",
                    models.PositiveIntegerField(
                        default=0, help_text="Enter the percentage off for the product."
                    ),
                ),
                (
                    "condition",
                    models.CharField(
                        blank=True,
                        choices=[("N", "New"), ("U", "Used")],
                        help_text="Select the condition of the product.",
                        max_length=2,
                        null=True,
                    ),
                ),
                (
                    "location",
                    django_countries.fields.CountryField(
                        help_text="Select the location of the product.", max_length=2
                    ),
                ),
                (
                    "flash_sale_start_date",
                    models.DateTimeField(
                        blank=True,
                        help_text="Enter the start date of the flash sale.",
                        null=True,
                    ),
                ),
                (
                    "flash_sale_end_date",
                    models.DateTimeField(
                        blank=True,
                        help_text="Enter the end date of the flash sale.",
                        null=True,
                    ),
                ),
                (
                    "category",
                    models.ForeignKey(
                        help_text="Select the category for this product.",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="products",
                        to="store.category",
                    ),
                ),
            ],
            options={
                "ordering": ("-created",),
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="ProductReview",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        unique=True,
                    ),
                ),
                ("created", models.DateTimeField(auto_now_add=True)),
                ("updated", models.DateTimeField(auto_now=True, null=True)),
                (
                    "ratings",
                    models.IntegerField(
                        choices=[
                            (1, "1 star"),
                            (2, "2 stars"),
                            (3, "3 stars"),
                            (4, "4 stars"),
                            (5, "5 stars"),
                        ],
                        help_text="The ratings given to the product.",
                        null=True,
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        help_text="The description of the product review."
                    ),
                ),
                (
                    "customer",
                    models.ForeignKey(
                        help_text="The customer who wrote the review.",
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="product_reviews",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "product",
                    models.ForeignKey(
                        help_text="The product being reviewed.",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="product_reviews",
                        to="store.product",
                    ),
                ),
            ],
            options={
                "ordering": ("-created",),
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Size",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        unique=True,
                    ),
                ),
                ("created", models.DateTimeField(auto_now_add=True)),
                ("updated", models.DateTimeField(auto_now=True, null=True)),
                (
                    "title",
                    models.CharField(
                        help_text="Enter the size title.", max_length=5, unique=True
                    ),
                ),
            ],
            options={
                "ordering": ("-created",),
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="SliderImage",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        unique=True,
                    ),
                ),
                ("created", models.DateTimeField(auto_now_add=True)),
                ("updated", models.DateTimeField(auto_now=True, null=True)),
                (
                    "_image",
                    models.ImageField(
                        help_text="Image for the slider",
                        upload_to="store/slider_images/",
                        validators=[store.validators.validate_image_size],
                    ),
                ),
            ],
            options={
                "ordering": ("-created",),
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="SizeInventory",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "quantity",
                    models.IntegerField(
                        blank=True,
                        default=0,
                        help_text="The quantity of this size variant in inventory.",
                    ),
                ),
                (
                    "extra_price",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        default=0,
                        help_text="The extra price for this size variant.",
                        max_digits=6,
                        null=True,
                    ),
                ),
                (
                    "product",
                    models.ForeignKey(
                        help_text="The product associated with this size inventory.",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="size_inventory",
                        to="store.product",
                    ),
                ),
                (
                    "size",
                    models.ForeignKey(
                        help_text="The size associated with this product.",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="product_size",
                        to="store.size",
                    ),
                ),
            ],
            options={
                "verbose_name_plural": "Product Size & Inventories",
            },
        ),
        migrations.CreateModel(
            name="ProductReviewImage",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "_image",
                    models.ImageField(
                        help_text="Image for the product review.",
                        upload_to="store/review_images",
                        validators=[store.validators.validate_image_size],
                    ),
                ),
                (
                    "product_review",
                    models.ForeignKey(
                        help_text="The product review associated with the image.",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="product_review_images",
                        to="store.productreview",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="ProductImage",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "_image",
                    models.ImageField(
                        help_text="The image of the product.",
                        upload_to="store/product_images",
                        validators=[store.validators.validate_image_size],
                    ),
                ),
                (
                    "product",
                    models.ForeignKey(
                        help_text="The product associated with this image.",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="images",
                        to="store.product",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="OrderItem",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        unique=True,
                    ),
                ),
                ("created", models.DateTimeField(auto_now_add=True)),
                ("updated", models.DateTimeField(auto_now=True, null=True)),
                (
                    "quantity",
                    models.PositiveSmallIntegerField(
                        help_text="The quantity of the product in the order item.",
                        validators=[django.core.validators.MinValueValidator(1)],
                    ),
                ),
                (
                    "unit_price",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="The unit price of the product in the order item.",
                        max_digits=6,
                    ),
                ),
                (
                    "size",
                    models.CharField(
                        help_text="The size of the product in the order item.",
                        max_length=20,
                        null=True,
                    ),
                ),
                (
                    "colour",
                    models.CharField(
                        help_text="The color of the product in the order item.",
                        max_length=20,
                        null=True,
                    ),
                ),
                (
                    "ordered",
                    models.BooleanField(
                        default=False,
                        help_text="Whether the order item has been ordered or not.",
                    ),
                ),
                (
                    "customer",
                    models.ForeignKey(
                        help_text="The customer associated with the order item.",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="order_items",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "order",
                    models.ForeignKey(
                        help_text="The order associated with the order item.",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="items",
                        to="store.order",
                    ),
                ),
                (
                    "product",
                    models.ForeignKey(
                        help_text="The product associated with the order item.",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="orderitems",
                        to="store.product",
                    ),
                ),
            ],
            options={
                "ordering": ("-created",),
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Notification",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        unique=True,
                    ),
                ),
                ("created", models.DateTimeField(auto_now_add=True)),
                ("updated", models.DateTimeField(auto_now=True, null=True)),
                (
                    "notification_type",
                    models.CharField(
                        choices=[("O", "Offer"), ("A", "Activity"), ("F", "Feed")],
                        help_text="The type of notification.",
                        max_length=1,
                    ),
                ),
                (
                    "title",
                    models.CharField(
                        help_text="The title of the notification.", max_length=255
                    ),
                ),
                (
                    "description",
                    models.TextField(help_text="The description of the notification."),
                ),
                (
                    "general",
                    models.BooleanField(
                        default=False,
                        help_text="Whether the notification is general or specific to individual customers.",
                    ),
                ),
                (
                    "customers",
                    models.ManyToManyField(
                        help_text="The customers associated with the notification.",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ("-created",),
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="FavoriteProduct",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        unique=True,
                    ),
                ),
                ("created", models.DateTimeField(auto_now_add=True)),
                ("updated", models.DateTimeField(auto_now=True, null=True)),
                (
                    "customer",
                    models.ForeignKey(
                        help_text="The customer who has marked this product as a favorite.",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="favorite_products",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "product",
                    models.ForeignKey(
                        help_text="The product marked as a favorite by the customer.",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="customer_favorites",
                        to="store.product",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="ColourInventory",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "quantity",
                    models.IntegerField(
                        blank=True,
                        default=0,
                        help_text="The quantity of this color variant in inventory.",
                    ),
                ),
                (
                    "extra_price",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        default=0,
                        help_text="The extra price for this color variant.",
                        max_digits=6,
                        null=True,
                    ),
                ),
                (
                    "colour",
                    models.ForeignKey(
                        help_text="The color associated with this product.",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="product_color",
                        to="store.colour",
                    ),
                ),
                (
                    "product",
                    models.ForeignKey(
                        help_text="The product associated with this color inventory.",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="color_inventory",
                        to="store.product",
                    ),
                ),
            ],
            options={
                "verbose_name_plural": "Product Color & Inventories",
            },
        ),
        migrations.CreateModel(
            name="CartItem",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        unique=True,
                    ),
                ),
                ("created", models.DateTimeField(auto_now_add=True)),
                ("updated", models.DateTimeField(auto_now=True, null=True)),
                (
                    "size",
                    models.CharField(
                        help_text="The size of the product in the cart item.",
                        max_length=20,
                        null=True,
                    ),
                ),
                (
                    "colour",
                    models.CharField(
                        help_text="The color of the product in the cart item.",
                        max_length=20,
                        null=True,
                    ),
                ),
                (
                    "quantity",
                    models.PositiveSmallIntegerField(
                        help_text="The quantity of the product in the cart item.",
                        validators=[django.core.validators.MinValueValidator(1)],
                    ),
                ),
                (
                    "extra_price",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="Any additional price associated with the cart item.",
                        max_digits=6,
                        null=True,
                    ),
                ),
                (
                    "cart",
                    models.ForeignKey(
                        help_text="The cart associated with the cart item.",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="items",
                        to="store.cart",
                    ),
                ),
                (
                    "product",
                    models.ForeignKey(
                        help_text="The product associated with the cart item.",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="store.product",
                    ),
                ),
            ],
            options={
                "ordering": ("-created",),
                "abstract": False,
            },
        ),
        migrations.AddConstraint(
            model_name="favoriteproduct",
            constraint=models.UniqueConstraint(
                fields=("customer", "product"), name="unique_customer_product"
            ),
        ),
    ]
